<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lingdingyang.github.io</id>
    <title>lingdingyang</title>
    <updated>2021-09-25T13:42:34.583Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lingdingyang.github.io"/>
    <link rel="self" href="https://lingdingyang.github.io/atom.xml"/>
    <logo>https://lingdingyang.github.io/images/avatar.png</logo>
    <icon>https://lingdingyang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, lingdingyang</rights>
    <entry>
        <title type="html"><![CDATA[go语言后端初见]]></title>
        <id>https://lingdingyang.github.io/post/go-yu-yan-hou-duan-chu-jian/</id>
        <link href="https://lingdingyang.github.io/post/go-yu-yan-hou-duan-chu-jian/">
        </link>
        <updated>2021-05-09T12:19:49.000Z</updated>
        <content type="html"><![CDATA[<p>这周是泉总带我们学习GO语言的后端基础。</p>
<p>后端与前端相反，前端重点实现的是页面的样式和一些简单的逻辑，在编程实现时往往可以确实看到每一行代码在界面上实现了怎样的效果，而后端则是作为后台对数据进行操作。因为一般要维护的数据量比较大，往往不能直观的观察数据在数据库中的储存情况，只能通过日志之类的记录方式来确定数据库的稳定运行，因此我觉得后端比前端难好多。。。。。</p>
<p>因为后端涉及的知识太多了，我自己懂得知识也都非常浅显，就简单对照代码分析下</p>
<pre><code class="language-go">package main
import (                    //类似于c的include，引入其他库的函数
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;github.com/labstack/echo/v4&quot;
	db &quot;github.com/replit/database-go&quot;
)
func main() {
	e := echo.New()                 //相当于创建了新的一个主页，网站为https://ldy.lingdingyang.repl.co
	e.GET(&quot;/&quot;, hello)                   //主页下的一个子页面，在主页网址的后面加上&quot;/&quot;，https://ldy.lingdingyang.repl.co/，会调用hello函数实现页面内容，下面两个同理
	e.POST(&quot;/subscribe&quot;, subscribe)
	e.GET(&quot;/get&quot;, GET)
	e.Logger.Fatal(e.Start(&quot;:1323&quot;))
}
func hello(c echo.Context) error {
	return c.String(http.StatusOK, &quot;Hello, World!&quot;)             //在页面上打印出Hello,Woeld!
}
func subscribe(c echo.Context) error {
	email := c.FormValue(&quot;email&quot;)           
	name := c.FormValue(&quot;name&quot;)
	db.Set(email, name)             //将数据写入数据库
	value, _ := db.Get(email)       //将数据从数据库中读出
	return c.String(http.StatusOK, fmt.Sprintf(&quot;1111，value=%s&quot;, value))        //打印在页面上
}
func GET(c echo.Context) error {
	email := c.QueryParam(&quot;email&quot;)          //这时搜索数据时用的页面，例如我要寻找邮箱为1426230684@email.com的人名，就打开网页https://ldy.lingdingyang.repl.co/get?email=1426230684@email.com
	value, _ := db.Get(email)
	return c.String(http.StatusOK, email+&quot;  &quot;+value)            //将结果打印在网页上
}
func show(c echo.Context) error {
	team := c.QueryParam(&quot;team&quot;)
	member := c.QueryParam(&quot;member&quot;)
	return c.String(http.StatusOK, &quot;team:&quot;+team+&quot;, member:&quot;+member)
}
// curl -F &quot;email=1426230684@email.com&quot; -F &quot;name=lingdingyang&quot; https://ldy.lingdingyang.repl.co/subscribe
</code></pre>
<p>一点效果图<br>
<img src="https://lingdingyang.github.io/post-images/1622553778936.png" alt="" loading="lazy"><br>
<img src="https://lingdingyang.github.io/post-images/1622553185191.png" alt="" loading="lazy"></p>
<p>代码中用的数据库的指令都是直接拿来用的，还有创建网页的那些指令，我还都完全不懂它们的实现方式和一些更深入的使用方法，所以就先只能写这些了。。。。。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ifLab BootCamp Wab前端学习]]></title>
        <id>https://lingdingyang.github.io/post/iflab-bootcamp-wab-qian-duan-xue-xi/</id>
        <link href="https://lingdingyang.github.io/post/iflab-bootcamp-wab-qian-duan-xue-xi/">
        </link>
        <updated>2021-05-07T06:08:27.000Z</updated>
        <content type="html"><![CDATA[<p>在学长的介绍和讲解下，简单学习了wab前端的一些知识，稍微对wab前端有了一些了解。<br>
感觉wab前端需要学习的内容特别多，一个网页包括了html,javascript,css这三个风格并不相同的语言，还成功各司其职，将网页内容，样式，功能逻辑处理好。好难.....</p>
<h1 id="一些知识点">一些知识点</h1>
<h2 id="html">html</h2>
<p>html用于描述网页的整体布局，包含的内容。html使用标记标签来描述网页的，成对出现的标签为闭合标签，单个出现的为自闭标签。不同的标签通常有不同的作用，或是用于区分各个部分。</p>
<h2 id="css">css</h2>
<p>css用于定义html中元素的样式。使用的方法通常是在需要应用的位置调用，并在后面定义样式的内容。一个样式可以再多处调用。</p>
<h2 id="javascript">javascript</h2>
<p>JavaScript是一种可以插入到html中的脚本语言。它和一般面向对象的编程语言比较像。它由html中的事件进行调用，并且需要在后面给出定义。也可以在多处不同地方进行调用。</p>
<h1 id="微型项目">微型项目</h1>
<p>经过学长的一下午讲解，又经历了我一个多周的摸索，自学，勉强完成了任务的阉割版，有点丑陋.，而且还有些Bug....</p>
<p>目前已发现的包括且但不限于：</p>
<ul>
<li>添加时点取消还是会添加上  （<s>我发现学长写的也有这个情况</s>）</li>
<li>勾选一个事件后其下一个事件也会变为勾选的状态（原因不明.....）</li>
<li>由于技术原因“全部”中无法做到勾选和删除，且在“已解决”和“未解决”中删除并无法同步到全部中</li>
</ul>
<p>有些问题我已经有了些解决的思路，碍于解决需要推到重来就没去做.....<br>
一点效果图<br>
<img src="https://lingdingyang.github.io/post-images/1620368923108.png" alt="" loading="lazy"><br>
<img src="https://lingdingyang.github.io/post-images/1620368933326.png" alt="" loading="lazy"><br>
<img src="https://lingdingyang.github.io/post-images/1620368941048.png" alt="" loading="lazy"></p>
<p>最后上代码</p>
<pre><code class="language-html">&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;header&gt;
      &lt;img
        class=&quot;avatar&quot;
        src=&quot;https://img0.baidu.com/it/u=3915069820,1437562641&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;
        alt=&quot;avatar&quot;
      /&gt;
      &lt;span class=&quot;username&quot;&gt;lingdingyang&lt;/span&gt;
      &lt;ul class=&quot;todo-op&quot;&gt;
        &lt;li class=&quot;op-item add&quot; @click=&quot;addtodo&quot;&gt;添加&lt;/li&gt;
        &lt;li class=&quot;op-item success&quot; @click=&quot;handleClick1&quot;&gt;已解决&lt;/li&gt;
        &lt;li class=&quot;op-item warning&quot; @click=&quot;handleClick2&quot;&gt;未解决&lt;/li&gt;
        &lt;li class=&quot;op-item&quot; @click=&quot;handleClick3&quot;&gt;全部&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/header&gt;
    &lt;section class=&quot;choose&quot;&gt;
      &lt;ul class=&quot;todo-list&quot; v-show=&quot;showsolved&quot;&gt;
        &lt;li class=&quot;todo-item&quot; v-for=&quot;item in showlist1&quot; :key=&quot;item.id&quot;&gt;
          &lt;input
            type=&quot;checkbox&quot;
            @change=&quot;(e) =&gt; checkchange1(item.value, item.id)&quot;
          /&gt;
          &lt;label&gt;{{ item.value }}&lt;/label&gt;
          &lt;input
            type=&quot;button&quot;
            value=&quot;删除&quot;
            class=&quot;delete&quot;
            @click=&quot;(e) =&gt; deleteitem1(item.value, item.id)&quot;
          /&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;ul class=&quot;todo-list&quot; v-show=&quot;showstill&quot;&gt;
        &lt;li class=&quot;todo-item&quot; v-for=&quot;item in showlist2&quot; :key=&quot;item.id&quot;&gt;
          &lt;input
            type=&quot;checkbox&quot;
            @change=&quot;(e) =&gt; checkchange(item.value, item.id)&quot;
          /&gt;
          &lt;label&gt;{{ item.value }}&lt;/label&gt;
          &lt;input
            type=&quot;button&quot;
            value=&quot;删除&quot;
            class=&quot;delete&quot;
            @click=&quot;(e) =&gt; deleteitem2(item.value, item.id)&quot;
          /&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;ul class=&quot;todo-list&quot; v-show=&quot;showall&quot;&gt;
        &lt;li class=&quot;todo-item&quot; v-for=&quot;item in showlist3&quot; :key=&quot;item.id&quot;&gt;
          &lt;label&gt;{{ item.value }}&lt;/label&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;script&gt;
export default {
  name: &quot;App&quot;,
  data() {
    return {
      list1: [],
      list2: [],
      list3: [],

      show3: true,
      show2: false,
      show1: false,
    };
  },
  computed: {
    showstill() {
      return this.show2;
    },
    showsolved() {
      return this.show1;
    },
    showall() {
      return this.show3;
    },
    showlist1() {
      return this.list1;
    },
    showlist3() {
      return this.list3;
    },
    showlist2() {
      return this.list2;
    },
  },
  methods: {
    deleteitem1(e, id) {
      this.list1.splice(id, 1);
      var a = 0;
      this.list1.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
      });
    },
    deleteitem2(e, id) {
      this.list2.splice(id, 1);
      var a = 0;
      this.list2.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
      });
    },
    checkchange2(e, id) {
      this.list2.push({
        id: this.list2.length,
        value: e,
        checked: false,
      });
      this.list1.splice(id, 1);
      var a = 0;
      this.list1.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
      });
      a = 0;
      this.list2.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
      });
    },
    checkchange(e, id) {
      this.list1.push({
        id: this.list1.length,
        value: e,
        checked: false,
      });
      this.list2.splice(id, 1);
      console.log(this.list2);
      var a = 0;
      this.list3.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
      });
      a = 0;
      this.list2.forEach((item) =&gt; {
        item.id = a;
        a = a + 1;
        item.checked = false;
      });
      console.log(this.list2);
    },
    handleClick1() {
      this.show1 = true;
      this.show2 = false;
      this.show3 = false;
    },
    handleClick2() {
      this.show1 = false;
      this.show2 = true;
      this.show3 = false;
    },
    handleClick3() {
      this.show1 = false;
      this.show2 = false;
      this.show3 = true;
    },
    addtodo() {
      var idd = prompt(&quot;事件&quot;);
      this.list3.push({
        id: this.list2.length,
        value: idd,
        checked: false,
      });
      this.list2.push({
        id: this.list2.length,
        value: idd,
        checked: false,
      });
    },
  },
};
&lt;/script&gt;
&lt;style&gt;
body {
  background: rgb(255, 255, 255);
}
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: #2c3e50;
  width: 800px;
  height: 500px;
  background: rgb(247, 204, 204);
  box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.05);
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border-radius: 13px;
}
header {
  position: relative;
  width: 800px;
  height: 64px;
  background: rgb(233, 189, 189);
  border-top-left-radius: 13px;
  border-top-right-radius: 13px;
  box-shadow: 0 2px rgba(0, 0, 0, 0.1);
}
section {
  height: 436px;
  width: 800px;
  overflow: scroll;
}
.avatar {
  position: relative;
  top: 6px;
  left: 12px;
  width: 50px;
  height: 50px;
  border-radius: 50%;
}
.username {
  display: inline-block;
  margin-left: 24px;
  vertical-align: middle;
  height: 64px;
  font-size: 20px;
  margin-top: 6px;
}
.todo-op {
  display: inline-block;
  position: absolute;
  top: 6px;
  right: 12px;
}
.op-item {
  display: inline-block;
  cursor: pointer;
}
.op-item:not(:last-child) {
  margin-right: 8px;
}
.op-item:hover {
  font-weight: bolder;
}
.success {
  color: green;
}
.warning {
  color: darkred;
}
.add {
  color: white;
}
.delete {
  position: absolute;
  left: 700px;
  color: red;
}
.todo-list {
  list-style: none;
}
&lt;/style&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[蓝桥杯游记]]></title>
        <id>https://lingdingyang.github.io/post/lan-qiao-bei-you-ji/</id>
        <link href="https://lingdingyang.github.io/post/lan-qiao-bei-you-ji/">
        </link>
        <updated>2021-04-18T13:07:14.000Z</updated>
        <content type="html"><![CDATA[<p>虽然只是B组，但题目还是比我想象的难了些。<br>
前五道直接提交答案的题型之前是真的没遇到过，虽然做了去年的真题，知道会有这种题型但还是在做第四道第五道题时卡了一会，到最后第四道题也没做出来...<br>
（第四道题应该是质因数分解，但是忘了怎么写了....）<br>
后五道题第四道打了暴力，第五道不会...<br>
这场比赛还是有些狼狈呀，可能是最近光顾着学新知识了，没怎么做题，手感不太好...<br>
等题目出来后再整理题目吧，这次有点狼狈的比赛就先这样吧。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning How to Learn]]></title>
        <id>https://lingdingyang.github.io/post/learning-how-to-learn/</id>
        <link href="https://lingdingyang.github.io/post/learning-how-to-learn/">
        </link>
        <updated>2021-04-13T11:26:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第一周">第一周</h1>
<p>两种思考模式：专注模式，发散模式。对于熟悉的问题，专注模式可以快速联想到问题，并快速解决，但对于一个陌生的问题，专注模式反而会限制你的思路，更难找到解决问题的方式。发散模式在面对新问题时可以帮助你开阔思路，找到解决问题的方向。<br>
<img src="https://lingdingyang.github.io/post-images/1618313732888.png" alt="" loading="lazy"><br>
专注模式思路更加密集，可以快速跳转，但也限制了大范围思考。<br>
<img src="https://lingdingyang.github.io/post-images/1618313737493.png" alt="" loading="lazy"><br>
发散模式相对稀疏，可以在不同的思路中跳转，有更广阔的的思考范围。<br>
专注模式需要集中精神，发散模式需要放松，将思路放开。</p>
<hr>
<p>克服拖延症，番茄工作法。</p>
<blockquote>
<ul>
<li>计时器计时25分钟。</li>
<li>25分钟内完全集中注意力。</li>
<li>结束后给自己一点奖励。</li>
</ul>
</blockquote>
<hr>
<p>睡眠很重要。睡眠不仅可以帮助排出大脑中的有毒物质，还可以帮助记忆正在学习的内容。</p>
<h1 id="第二周">第二周</h1>
<p>组块：组块化是一种思维的整理，根据意义将信息碎片拼接起来形成逻辑整体，而新的逻辑整体让信息更容易记忆，同时也可以让你更轻松地将组块整合到所学内容的大框架内，方便整体调用和联系其他信息。</p>
<hr>
<p>形成组块：</p>
<blockquote>
<ul>
<li>先分阶段学习简单的部分，形成小的神经组块，之后再将这些小的组块整理合并，组合成大组块。</li>
<li>按步骤解决问题时，不仅要记住每个步骤的内容，还要记住步骤间的联系。要实现独立完成所有步骤后才算学会。</li>
<li>要形成组块需要先对想要组块化的信息全神贯注，这样新的知识才会和以前的知识联系起来。</li>
</ul>
</blockquote>
<hr>
<p>回顾法：阅读材料后，隔一段时间后，回忆材料中的信息，检索材料中的关键概念，然后复读材料。<br>
能力错觉：书上划的知识和笔记中记录的知识并不等于自己完全掌握的知识，避免陷入自欺欺人的错觉。常进行个人检测可以避免陷入能力错觉。</p>
<hr>
<p>过度学习：学会一个基本概念后，在这段时间不断的巩固它并不能加强长期记忆联系，反而可能陷入能力错觉，让你误认为你已经掌握了所有知识。<br>
为避免过度学习应该均衡学习，把精力集中在被你认为困难的部分，对困难部分进行刻意训练。刻意训练不仅可以让自己更清楚还不熟练的知识，还能提高学习效率。</p>
<h1 id="第三周">第三周</h1>
<h2 id="拖延症">拖延症：</h2>
<p>拖延症与大脑的痛疼有关，在做不想做的事时大脑的痛疼神经就会开始工作，会让你转移注意力到一些让你享受的事上。对抗拖延需要消耗毅力，要合理利用毅力去克服重要的拖延。</p>
<hr>
<h2 id="僵尸意思">僵尸意思：</h2>
<p>当你习惯于做某件事时，在进行这件事时大脑就不需要消耗大多注意力在这件事上。进入僵尸状态需要四个阶段。</p>
<ul>
<li>信号。作为触发器。</li>
<li>惯势。大脑在接收到信号后做出的习惯性活动。</li>
<li>奖励。任何一种习惯得以发展和延续都是因为它可以回报我们，它会立即给我们带来些许愉悦感。</li>
<li>信念。坚信习惯，习惯就会强大起来。</li>
</ul>
<hr>
<h2 id="过程与结果">过程与结果：</h2>
<p>为防止拖延，应该把注意力放在过程而不是结果上。过度看重结果会触发痛苦，导致拖延的情绪。把注意力放在过程上可以利用一些习惯来解决问题，减少不愉快。</p>
<hr>
<h1 id="第四周">第四周</h1>
<h2 id="运动有助于新神经元的存活">运动有助于新神经元的存活：</h2>
<p>大脑中的特定区域每天都会有新的神经元产生，这些新的神经元有助于我们学习新的事物。新的神经元也容易死亡，运动可以帮助新神经元的存活。</p>
<hr>
<h2 id="把握大脑发展的黄金时期">把握大脑发展的黄金时期：</h2>
<p>大脑发展有几个黄金时期，那时某些特定能力会突然提高。如学习母语的黄金时期是0~2岁。</p>
<hr>
<h2 id="用比喻和类比进行记忆">用比喻和类比进行记忆：</h2>
<p>比喻能帮助发现两个事物的相似之处，还可以帮助理解，加固记忆。通过比喻和类比有利于将不同方面的知识联系到一起，拓展解决问题的思路。</p>
<hr>
<h2 id="记忆力与思维定势">记忆力与思维定势：</h2>
<p>好的记忆力有助于记忆知识，但也会有更严重的思维定势，不容易拓展思路。而记忆力稍微差些的人往往能有更强的创新力，因为他们往往有更发散的思维。</p>
<hr>
<h2 id="左右脑与团队合作">左右脑与团队合作：</h2>
<p>右脑能帮助我们反观工作全局，找出错误，因此右脑十分重要。左脑帮助我们解决问题，认识世界，同时相信这些知识是正确的且长久不变。这时我们需要同时注重左右脑，不能过于集中注意于左脑，一心解决问题导致在错误的路上越走越远。一个人工作往往像是仅左脑或右脑在工作，这时需要团队帮你检查错误，共同解决问题。</p>
<hr>
<h2 id="有用的测试清单">有用的测试清单：</h2>
<ul>
<li>你是否认真努力地去理解课文</li>
<li>你是否跟同学讨论过作业的问题</li>
<li>你是否积极参与作业小组中的讨论，贡献自己的观点，并提出问题</li>
<li>交作业的时候你是否已经弄清了所有问题的答案</li>
<li>对于作业中不明白的问题你是否在课上提出疑问</li>
<li>考试前睡眠时间是否合理</li>
</ul>
<hr>
<h2 id="先难后易的考试策略">先难后易的考试策略：</h2>
<p>现从难题开始，然后迅速转向容易的题。浏览一遍所有题目后，从看起来比较难的题开始，阅读完后感到没思路也没问题，这时再去做简单的题，这期间你会发散思路为解决这道难题提供思路。</p>
<h1 id="结课了">结课了！！！</h1>
<figure data-type="image" tabindex="1"><img src="https://lingdingyang.github.io/post-images/1620546161834.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇BLOG]]></title>
        <id>https://lingdingyang.github.io/post/di-yi-pian-blog/</id>
        <link href="https://lingdingyang.github.io/post/di-yi-pian-blog/">
        </link>
        <updated>2021-04-11T01:19:39.000Z</updated>
        <content type="html"><![CDATA[<p><s>第一篇BLOG</s></p>
<p>​       其实这不是第一篇Blog，之前用Hugo搭配Github尝试搭建结果失败了，感觉是网络问题，本地浏览没有问题但是总是上传不成功....<br>
在寻找解决办法时我又碰巧了解了Gridea，用它来搭建blog可方便太多了，而且还有可视化的界面方便维护。<img src="https://lingdingyang.github.io/post-images/1618123773581.png" alt="" loading="lazy"><br>
为了绕开网络问题，我又选择将库建在Coding上而不是Github。我迫不及待的尝试了一发。<br>
<a href="https://coding-pages-bucket-3546209-8589664-15590-561094-1305511806.cos-website.ap-beijing.myqcloud.com/">这里</a>（https://coding-pages-bucket-3546209-8589664-15590-561094-1305511806.cos-website.ap-beijing.myqcloud.com/）<br>
额...虽然是成功了，更新维护的速度很快也很方便，但这个网址真的是又长又难记，实在是太掉价了，不行，看来还是要用Github。<br>
我还是想用Gridea配合Github搭建，毕竟维护起来方便，在学长的帮助下成功解决了<s>科学上网</s>问题，终于，这个Blog搭建完了。</p>
]]></content>
    </entry>
</feed>